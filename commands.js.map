{"version":3,"file":"commands.js","mappings":"YAGA,IACIA,EADAC,EAAY,CAAC,EAIjBC,OAAOC,SAAQ,WACbH,EAAOE,OAAOE,QAAQC,QAAQL,IAChC,IAmFAE,OAAOI,QAAQC,UAAU,cA7EzB,SAAoBC,GAElB,IAAMC,EAAWT,EAAKU,GAAKV,EAAKU,GAAGC,KAAI,SAAAC,GAAS,OAAIA,EAAUC,YAAY,IAAEC,KAAK,MAAQ,GACnFC,EAASf,EAAKgB,KAAOhB,EAAKgB,KAAKH,aAAe,GAC9CI,EAAUjB,EAAKiB,SAAW,aAC1BC,EAASlB,EAAKmB,GAAKnB,EAAKmB,GAAGR,KAAI,SAAAQ,GAAE,OAAIA,EAAGN,YAAY,IAAI,GAGxDO,EAgCR,SAA8BA,GAC5B,IAAMC,EAAY,IAAIC,KAAKF,GACrBG,EAAMC,OAAOH,EAAUI,WAAWC,SAAS,EAAG,KAC9CC,EAAQH,OAAOH,EAAUO,WAAa,GAAGF,SAAS,EAAG,KACrDG,EAAOL,OAAOH,EAAUS,eAAeC,OAAO,GAC9CC,EAAQR,OAAOH,EAAUY,YAAYP,SAAS,EAAG,KACjDQ,EAAUV,OAAOH,EAAUc,cAAcT,SAAS,EAAG,KAE3D,MAAO,GAAPU,OAAUb,EAAG,KAAAa,OAAIT,EAAK,KAAAS,OAAIP,EAAI,KAAAO,OAAIJ,EAAK,KAAAI,OAAIF,EAC7C,CAzCyBG,CAAqBrC,EAAKsC,iBAa3CC,EAmCR,SAAkCtC,GAChC,IAGMuC,EAAY,CAChBC,aAAcxC,EAAUyC,SAAW,OAAS,EAC5CC,WAAY1C,EAAU2C,OAAS,SAAW,EAC1CC,WAAY5C,EAAU6C,QAAU,iBAChCC,YAAa9C,EAAU+C,SAAW,kBAClCC,SAAUhD,EAAUiD,MAAQ,gBAGxBC,EAAM,IAAIC,IAXA,+BAgBhB,OAJAC,OAAOC,KAAKd,GAAWe,SAAQ,SAAAC,GAC7BL,EAAIM,aAAaC,OAAOF,EAAKhB,EAAUgB,GACzC,IAEOG,mBAAmBR,EAAIS,WAChC,CArDkBC,CAVhB5D,EAAY,CACV6D,SAAU,GACVpB,SAAUjC,EAAW,CAACA,GAAY,GAClCmC,OAAQ7B,EACR+B,OAAQ1B,EACR4B,QAAS/B,EACTiC,KAAMhC,IAKRjB,EAAU6D,SAAWvB,EAGrBrC,OAAOE,QAAQC,QAAQ0D,sBAAsB,CAC3CC,aAAc/D,EAAUyC,SACxBuB,aAAc/C,EAAOP,KAAI,SAAAuD,GAAK,MAAK,CAAErD,aAAcqD,EAAO,IAC1DjD,QAASA,EACT6C,SAAU,YAAF1B,OAAcG,EAAO,sBAAAH,OAAqBG,EAAO,UAG3D/B,EAAM2D,WACR,IAwHAjE,OAAOI,QAAQC,UAAU,kBAzEzB,SAAwBN,EAAWO,GACpBN,OAAOE,QAAQC,QAAQL,KAqEpCQ,EAAM2D,WACR,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/* global Office */\n\n// Global variable for email data\nlet emailData = {};\nlet item;\n\n// Initialize Office add-in\nOffice.onReady(() => {\n  item = Office.context.mailbox.item;\n});\n\n/**\n * Get email data and prepare default values for a new email.\n * @param {Office.AddinCommands.Event} event\n */\nfunction GetDefault(event) {\n  // Extract email fields\n  const receiver = item.to ? item.to.map(recipient => recipient.emailAddress).join(\", \") : \"\";\n  const sender = item.from ? item.from.emailAddress : \"\";\n  const subject = item.subject || \"No subject\";\n  const ccList = item.cc ? item.cc.map(cc => cc.emailAddress) : [];\n\n  // Format email timestamp\n  const emailTimestamp = formatEmailTimestamp(item.dateTimeCreated);\n\n  // Construct emailData object\n  emailData = {\n    htmlBody: \"\",\n    campaign: receiver ? [receiver] : [],\n    source: sender,\n    medium: emailTimestamp,\n    content: subject,\n    term: ccList,\n  };\n\n  // Generate UTM URL and add it to email body\n  const UTM_URL = generateURLFromEmailData(emailData);\n  emailData.htmlBody = UTM_URL;\n\n  // Display a new email form with the prepared data\n  Office.context.mailbox.displayNewMessageForm({\n    toRecipients: emailData.campaign,\n    ccRecipients: ccList.map(email => ({ emailAddress: email })),\n    subject: subject,\n    htmlBody: `<a href=\"${UTM_URL}\" target=\"_blank\">${UTM_URL}</a>`,\n  });\n\n  event.completed();\n}\n\n/**\n * Format email timestamp into a specific format.\n * @param {string} emailTimestamp\n * @returns {string} Formatted timestamp\n */\nfunction formatEmailTimestamp(emailTimestamp) {\n  const timestamp = new Date(emailTimestamp);\n  const day = String(timestamp.getDate()).padStart(2, \"0\");\n  const month = String(timestamp.getMonth() + 1).padStart(2, \"0\");\n  const year = String(timestamp.getFullYear()).slice(-2);\n  const hours = String(timestamp.getHours()).padStart(2, \"0\");\n  const minutes = String(timestamp.getMinutes()).padStart(2, \"0\");\n\n  return `${day}-${month}-${year}_${hours}.${minutes}`;\n}\n\n/**\n * Generate a UTM URL using email data.\n * @param {Object} emailData\n * @returns {string} Generated UTM URL\n */\nfunction generateURLFromEmailData(emailData) {\n  const baseURL = \"http://www.centreblock.org/\";\n\n  // Construct UTM parameters from emailData\n  const utmParams = {\n    utm_campaign: emailData.campaign + \"+to\" || \"default_campaign\",\n    utm_source: emailData.source + \"+from\" || \"default_source\",\n    utm_medium: emailData.medium || \"default_medium\",\n    utm_content: emailData.content || \"default_content\",\n    utm_term: emailData.term || \"default_term\",\n  };\n\n  const url = new URL(baseURL);\n  Object.keys(utmParams).forEach(key => {\n    url.searchParams.append(key, utmParams[key]);\n  });\n\n  return decodeURIComponent(url.toString());\n}\n\n// Register the functions with Office actions\nOffice.actions.associate(\"GetDefault\", GetDefault);\n\n// Perform functionality when a new message is composed\nfunction SetDefaultData(emailData, event) {\n  const item = Office.context.mailbox.item;\n\n  // Show a notification for the event (for debugging)\n  // const message = {\n  //   type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n  //   message: \"SetDefaultData event is working.\",\n  //   icon: \"Icon.80x80\",\n  //   persistent: true,\n  // };\n  // Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // Debug: Log the emailData object to check its structure\n  // console.log(\"emailData:\", emailData);\n\n  // Set 'Subject' field (Content)\n  // if (emailData.content) {\n  //   item.subject.setAsync(emailData.content, function (result) {\n  //     if (result.status === \"failed\") {\n  //       console.error(\"Failed to set subject: \" + result.error.message);\n  //     } else {\n  //       console.log(\"Subject set successfully.\");\n  //     }\n  //   });\n  // }\n\n  // Set 'CC' field (if present)\n\n  // Transform ccList to required format\n  // const ccTransform = emailData.term; // Assuming 'term' contains the CC email array\n  // const formattedCcList = ccTransform.map(email => {\n  //   if (typeof email === \"string\") {\n  //     return { emailAddress: email }; // For plain strings\n  //   } else if (email.emailAddress) {\n  //     return { emailAddress: email.emailAddress }; // If already an object\n  //   }\n  //   return null; // Skip invalid entries\n  // }).filter(entry => entry !== null); // Remove any null entries\n\n  // console.log(\"Formatted CC List:\", formattedCcList);\n\n  // Set the CC field\n  //Office.context.mailbox.item.cc.setAsync([\"test@outlook.com\",\"testsecond@outlook.com\"]);\n  // Set 'To' field (Receiver)\n  // if (emailData.campaign && emailData.campaign.length > 0) {\n  //   item.to.setAsync([{ emailAddress: emailData.campaign }], function (result) {\n  //     if (result.status === \"failed\") {\n  //       console.error(\"Failed to set 'To' field: \" + result.error.message);\n  //     } else {\n  //       console.log(\"'To' field set successfully.\");\n  //     }\n  //   });\n  // }\n\n  // Insert the generated URL into the email body\n  // if (emailData && emailData.generatedURL) {\n  //   const emailBody = `<a href=\"${emailData.generatedURL}\" target=\"_blank\">${emailData.generatedURL}</a>`;\n  //   item.body.setAsync(\n  //     emailBody,\n  //     { coercionType: Office.CoercionType.Html },\n  //     result => {\n  //       if (result.status === Office.AsyncResultStatus.Succeeded) {\n  //         console.log(\"URL inserted into email body successfully.\");\n  //       } else {\n  //         console.error(\"Failed to insert URL into email body:\", result.error);\n  //       }\n  //     }\n  //   );\n  // }\n  // Mark the event as completed\n  event.completed();\n}\n// Register the functions with Office actions.\nOffice.actions.associate(\"SetDefaultData\", SetDefaultData);\n"],"names":["item","emailData","Office","onReady","context","mailbox","actions","associate","event","receiver","to","map","recipient","emailAddress","join","sender","from","subject","ccList","cc","emailTimestamp","timestamp","Date","day","String","getDate","padStart","month","getMonth","year","getFullYear","slice","hours","getHours","minutes","getMinutes","concat","formatEmailTimestamp","dateTimeCreated","UTM_URL","utmParams","utm_campaign","campaign","utm_source","source","utm_medium","medium","utm_content","content","utm_term","term","url","URL","Object","keys","forEach","key","searchParams","append","decodeURIComponent","toString","generateURLFromEmailData","htmlBody","displayNewMessageForm","toRecipients","ccRecipients","email","completed"],"sourceRoot":""}